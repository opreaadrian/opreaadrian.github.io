<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator><link href="https://codesi.nz/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codesi.nz/" rel="alternate" type="text/html" /><updated>2016-09-20T14:33:40+03:00</updated><id>https://codesi.nz/</id><title>codesins.</title><subtitle>codesins. is an opinionated blog about JavaScript, life and everything inbetween. It is maintained by Adrian Oprea, a software developer heavily focused on JavaScript. Adrian also likes to read, travel and enjoy life.</subtitle><author><name>Adrian Oprea</name><email>adrian@codesi.nz</email><uri>https://ro.linkedin.com/in/opreageorgeadrian</uri></author><entry><title>Top 5 things to consider when choosing a new technology</title><link href="https://codesi.nz/top-5-things-to-consider-when-choosing-a-new-technology/" rel="alternate" type="text/html" title="Top 5 things to consider when choosing a new technology" /><published>2016-09-16T00:00:00+03:00</published><updated>2016-09-16T00:00:00+03:00</updated><id>https://codesi.nz/top-5-things-to-consider-when-choosing-a-new-technology</id><content type="html" xml:base="https://codesi.nz/top-5-things-to-consider-when-choosing-a-new-technology/">&lt;p&gt;There is a saying that naming things is the most difficult part of software development and it is 100% true. At the same time, choosing technologies, libraries, platforms or programming languages can be just as hard.
There are many aspects to consider, besides how we feel about it or if it is trendy or not. Judging a framework, for example, only by its popularity and how bad you want to work with it, without looking at some numbers is a thing I call Resume-Driven Development (RDD) and has nothing to do with healthy software development practices. In this article, I will share with you, my process for making such difficult choices.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#a-bit-of-context&quot; id=&quot;markdown-toc-a-bit-of-context&quot;&gt;A bit of context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#case-study&quot; id=&quot;markdown-toc-case-study&quot;&gt;Case study&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-evaluation-process&quot; id=&quot;markdown-toc-the-evaluation-process&quot;&gt;The evaluation process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-evaluation-criteria&quot; id=&quot;markdown-toc-the-evaluation-criteria&quot;&gt;The evaluation criteria&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#community-size&quot; id=&quot;markdown-toc-community-size&quot;&gt;Community size&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#github-activity&quot; id=&quot;markdown-toc-github-activity&quot;&gt;GitHub activity&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#npm-stats&quot; id=&quot;markdown-toc-npm-stats&quot;&gt;Npm stats&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#official-documentation-maturity&quot; id=&quot;markdown-toc-official-documentation-maturity&quot;&gt;Official documentation maturity&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#learning-material-availability&quot; id=&quot;markdown-toc-learning-material-availability&quot;&gt;Learning material availability&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#extra-criteria&quot; id=&quot;markdown-toc-extra-criteria&quot;&gt;Extra criteria&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#closing-thoughts&quot; id=&quot;markdown-toc-closing-thoughts&quot;&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#im-taking-on-new-projects&quot; id=&quot;markdown-toc-im-taking-on-new-projects&quot;&gt;I’m taking on new projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-bit-of-context&quot;&gt;A bit of context&lt;/h2&gt;

&lt;p&gt;During my career as a consultant, I’ve always offered technical guidance to clients. From choosing between cloud providers to optimizing the development process to choosing a front-end framework, I’ve done it all.&lt;br /&gt;
One of the frequent issues I faced when working with the the client’s team on choosing a specific technology was the lack of process. They either did not have a process or they did not know about it.&lt;/p&gt;

&lt;p&gt;If you own a business or you are a decision maker, you should know that migrating to new technologies without a clear process and careful consideration from the teams involved, can be highly detrimental.&lt;br /&gt;
I’m not saying that you should have a 3-month analysis process, requiring detailed documentation and sign-off from 5 stakeholders. Far from it! These processes need to be light and streamlined. The only thing I’m suggesting is that a process should be in place and it should be known by all team members.&lt;/p&gt;

&lt;p&gt;Think about the following scenario:&lt;/p&gt;

&lt;p&gt;Your team chooses a framework they know litte about. They are under pressure and they can’t take the time to look at some stats for each available framework. They know little about available learning materials and don’t have time to evaluate the learning curve. One of two things can happen, and the latter is more likely than the former:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your company is an early adopter of a technology that is about to hit the mainstream. You get to be several steps in front of your competitors.&lt;/li&gt;
  &lt;li&gt;You end up with an unknown technology that only a specific team in your company knows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you end up in situation #2, which is almost always the case, not only is your project delivery going to be affected but you might also have trouble hiring the right people further down the road.&lt;/p&gt;

&lt;h2 id=&quot;case-study&quot;&gt;Case study&lt;/h2&gt;

&lt;p&gt;Let’s pretend for a moment that you want to migrate an application written in Flash, to modern web technologies and your team needs to choose the front-end stack to develop on. 
I will outline the process you should use to evaluate the most known front-end frameworks/libraries and decide on the stack the team would later use to develop the new application.&lt;/p&gt;

&lt;h2 id=&quot;the-evaluation-process&quot;&gt;The evaluation process&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a list of (relevant) candidate front-end libraries&lt;/li&gt;
  &lt;li&gt;Establish the evaluation criteria&lt;/li&gt;
  &lt;li&gt;Brief the team on the list and the criteria. Offer useful links for each technology&lt;/li&gt;
  &lt;li&gt;Set up 1 or 2 meetings to discuss, clarify and decide&lt;/li&gt;
  &lt;li&gt;Create a proof of concept using the chosen library&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The advantage of having this process is that you can stop after step 5 and decide whether it is worth going with framework X or if you need another round.&lt;/p&gt;

&lt;p&gt;Below is a list of the most relevant front-end libraries, in no particular order.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io/&quot; title=&quot;Angular 2 official website&quot; target=&quot;blank&quot;&gt;Angular 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; title=&quot;React JS GitHub page&quot; target=&quot;blank&quot;&gt;React.js&lt;/a&gt; / &lt;a href=&quot;http://redux.js.org&quot; title=&quot;Redux official website&quot; target=&quot;blank&quot;&gt;Redux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cycle.js.org/&quot; title=&quot;Cycle.js official website&quot; target=&quot;blank&quot;&gt;Cycle.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aurelia.io/&quot; title=&quot;Aurelia.js official website&quot; target=&quot;blank&quot;&gt;Aurelia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vuejs.org/&quot; title=&quot;Vue.js official website&quot; target=&quot;blank&quot;&gt;Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-evaluation-criteria&quot;&gt;The evaluation criteria&lt;/h2&gt;

&lt;p&gt;This is the most important aspect of the whole process. This is your filter and it should reflect your actual needs. Listed below are the criteria I use for all my client projects.&lt;/p&gt;

&lt;h3 id=&quot;community-size&quot;&gt;Community size&lt;/h3&gt;

&lt;p&gt;My recommendation is to stick with a library that has a large community. By community you can think of everything ranging from Twitter hashtags, StackOverflow community, IRC channels, Slack Channels.
Another important aspect is the number of events (meetups, conferences) in your area.&lt;/p&gt;

&lt;h3 id=&quot;github-activity&quot;&gt;GitHub activity&lt;/h3&gt;

&lt;p&gt;A big part of the decision is the GitHub repository. I’m not talking about GitHub stars. I can’t tell you the number of times I starred a project that I later forgot about. I’m talking about actual activity.&lt;/p&gt;

&lt;p&gt;Take into account the following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contributors (more is better)&lt;/li&gt;
  &lt;li&gt;Commits (more is better)&lt;/li&gt;
  &lt;li&gt;Resolved / Pending issues (more is better / less is better)&lt;/li&gt;
  &lt;li&gt;Pending pull requests (less is better)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of the indicators above signal the level of activity and the involvelment of the community in the development / maintenance process. For example, if there are many pull requests and some of them are pretty old and left hanging, that is a clear sign of a slow-moving community. This is probably due to the fact that open-source projects are usually side-projects that people maintain out of passion, outside their working hours.&lt;/p&gt;

&lt;h3 id=&quot;npm-stats&quot;&gt;Npm stats&lt;/h3&gt;

&lt;p&gt;This is simple. If it has a lot of downloads that means that it is used. compared to GitHub fork count or stars, which only indicate the level of interest of that community, the download count literally means that the module is in use. I don’t have a threshold or an orientative number but always look for the highest number of downloads.&lt;/p&gt;

&lt;h3 id=&quot;official-documentation-maturity&quot;&gt;Official documentation maturity&lt;/h3&gt;

&lt;p&gt;Sift through the documentation of the library. If you can make sense of it, then you probably have a good candidate for the final round. Note that this doesn’t mean everyone can understand the documentation. Make sure you get input from the team every step of the way. You might also find that for your sample application everything is very clear, but when you work on non-trivial applications, things can get more complicated. Always be sure to check what people are saying on forums and websites. Some documentations are available on GitHub so you might find some useful information directly on the repository.&lt;/p&gt;

&lt;h3 id=&quot;learning-material-availability&quot;&gt;Learning material availability&lt;/h3&gt;

&lt;p&gt;I won’t go into much detail on this, as it is self-explanatory. All I do is follow the list of steps outlined below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google for the library and eye-ball the number of blog articles available&lt;/li&gt;
  &lt;li&gt;Search for courses on training sites such as: &lt;a href=&quot;http://pluralsight.com&quot; title=&quot;Link to Pluralsight website&quot; target=&quot;blank&quot;&gt;pluralsight.com&lt;/a&gt;, &lt;a href=&quot;http://egghead.io&quot; title=&quot;Link to Egghead.io website&quot; target=&quot;blank&quot;&gt;egghead.io&lt;/a&gt;, &lt;a href=&quot;http://tutsplus.com&quot; title=&quot;Link to Tutsplus.com website&quot; target=&quot;blank&quot;&gt;tutsplus.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Look on Twitter and other popular tech news aggregators like &lt;a href=&quot;&quot;&gt;echojs.com&lt;/a&gt; for mentions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;extra-criteria&quot;&gt;Extra criteria&lt;/h3&gt;

&lt;p&gt;If after going through the process above, you still haven’t found “the right one” there are two more steps that you can take:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Check if the project is backed by a company. As I mentioned before, OSS projects are usually passion projects of people who also have a day job. This is usually a risk factor as they might grow tired or bored of the project, or they might not have the time to maintain it anymore. On the other hand, companies have people or entire teams dedicated to the development of a project, which brings more stability in terms of project maintenance.&lt;/li&gt;
  &lt;li&gt;Check the activity of the main contributor / contributors since the project started. If they dropped development on a framework to go work for a company and after that they left the company and started a new framework, I would advise you to think a bit more about the reliability of the project. It might be an extraordinary piece of software but unless you want to possibly become a contributor, you need to stay away from projects like this.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;If you expected me to bash all the libraries in the list and come up with a winner, you got tricked. I’m not going to declare winners here, but you can use &lt;a href=&quot;/resources/frontend_libraries_comparison.pdf&quot; target=&quot;blank&quot;&gt;this document&lt;/a&gt; I put together a couple of weeks ago for a client of mine and decide for yourself.&lt;/p&gt;

&lt;h2 id=&quot;im-taking-on-new-projects&quot;&gt;I’m taking on new projects&lt;/h2&gt;

&lt;p&gt;I love working on different projects and helping people and businesses to meet their goals.&lt;br /&gt;
If you need help, send an email at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#100;&amp;#114;&amp;#105;&amp;#097;&amp;#110;&amp;#064;&amp;#099;&amp;#111;&amp;#100;&amp;#101;&amp;#115;&amp;#105;&amp;#046;&amp;#110;&amp;#122;&quot;&gt;&amp;#097;&amp;#100;&amp;#114;&amp;#105;&amp;#097;&amp;#110;&amp;#064;&amp;#099;&amp;#111;&amp;#100;&amp;#101;&amp;#115;&amp;#105;&amp;#046;&amp;#110;&amp;#122;&lt;/a&gt; and let’s see what I can help you with.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:
&lt;a href=&quot;https://www.flickr.com/photos/keepitsurreal/&quot;&gt;Kyle Pearce&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/aiJFxH&quot;&gt;Choices&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>There is a saying that naming things is the most difficult part of software development and it is 100% true. At the same time, choosing technologies, libraries, platforms or programming languages can be just as hard.
There are many aspects to consider, besides how we feel about it or if it is trendy or not. Judging a framework, for example, only by its popularity and how bad you want to work with it, without looking at some numbers is a thing I call Resume-Driven Development (RDD) and has nothing to do with healthy software development practices. In this article, I will share with you, my process for making such difficult choices.</summary></entry><entry><title>Using ES6 arrow functions in production-ready apps</title><link href="https://codesi.nz/es6-arrow-functions-production/" rel="alternate" type="text/html" title="Using ES6 arrow functions in production-ready apps" /><published>2016-09-05T00:00:00+03:00</published><updated>2016-09-05T00:00:00+03:00</updated><id>https://codesi.nz/using-es6-arrow-functions-in-production-ready-apps</id><content type="html" xml:base="https://codesi.nz/es6-arrow-functions-production/">&lt;p&gt;If you are just getting started with ES6, you might have heard about “fat arrow functions”. They are a great addition to the ECMAScript 6 standard and their origin is probably the CoffeeScript function declaration. You can think of them as throwaway functions that a you can attach to a click or mouse event.&lt;br /&gt;
There are a couple of ways to use arrow functions and we are going to go over each one in turn.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#anonymous-callbacks&quot; id=&quot;markdown-toc-anonymous-callbacks&quot;&gt;Anonymous callbacks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#function-expressions&quot; id=&quot;markdown-toc-function-expressions&quot;&gt;Function expressions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#returning-data&quot; id=&quot;markdown-toc-returning-data&quot;&gt;Returning data&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-the-return-keyword&quot; id=&quot;markdown-toc-using-the-return-keyword&quot;&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-the-implicit-return&quot; id=&quot;markdown-toc-using-the-implicit-return&quot;&gt;Using the implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;anonymous-callbacks&quot;&gt;Anonymous callbacks&lt;/h2&gt;
&lt;p&gt;The first and most intuitive use for an arrow function would be as an anonymous callback. You can attach an arrow function to a button’s click event as but you can also pass it as a callback to &lt;a href=&quot;#mdn_link&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// click.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;clicked&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Every time we click the button identified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;btn&lt;/code&gt; variable, we are going to log the message “clicked”. Nothing too fancy, just an anonymous function responding to an event.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// map.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multipliedBy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multipliedBy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [2, 4, 6, 8]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As I mentioned in my &lt;a href=&quot;/es6-arrow-functions-in-depth/#implicit-return&quot; title=&quot;Link to article section&quot; target=&quot;blank&quot;&gt;ES6 arrow functions in depth&lt;/a&gt; article, the arrow function implicitly returns the result of executing its logic, if it has a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Function_body&quot; title=&quot;More info on arrow functions concise body&quot;&gt;concise body / block body&lt;/a&gt;.&lt;br /&gt;
This feature makes the arrow function an ideal callback for &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; operations that return new arrays, like &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this in mind, let’s simplify our &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multipliedBy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or without the parens around the argument&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multipliedBy2WithShorterCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;function-expressions&quot;&gt;Function expressions&lt;/h2&gt;

&lt;p&gt;The function expression form of the arrow function is very popular in the React.js community. This is mostly due to its concise semantics. One of the people making extensive use of this feature in their examples and tutorials is Dan Abramov, the author of Redux.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[..&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows you to call your otherwise anonymous arrow function wherever you need it, by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; identifier. Just be  careful that the hoisting for function expressions is different from the regular function. While the function is hoisted with all its body, to the top of the scope, function expressions are treated as regular variables, and only the &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; identifier will be hoisted to the top of the scope but without the function body. This is why you cannot call functions defined using function expressions, before the site where they are assigned to the identifier in the code.&lt;/p&gt;

&lt;h2 id=&quot;returning-data&quot;&gt;Returning data&lt;/h2&gt;

&lt;p&gt;If you take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; example, you can tell from afar that it is very easy to return data from an arrow function.&lt;/p&gt;

&lt;h3 id=&quot;using-the-return-keyword&quot;&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword&lt;/h3&gt;

&lt;p&gt;As with any other function, you can return data from an arrow function using the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplyBy3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;multiplyBy3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;multiplyBy3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;using-the-implicit-return&quot;&gt;Using the implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Let’s rewrite our example to use the implicit return feature of arrow functions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplyBy3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;multiplyBy3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;multiplyBy3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you need to return objects from an arrow functions, there’s a catch. You cannot use the curly braces directly as that would throw an error.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInitialData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Jane Doe&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This will throw an error&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInitialData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The JavaScript engine expects the object’s curly braces to be a block of code. Instead it finds identifiers, colons and commas and it doesn’t quite know what to do with them.&lt;/p&gt;

&lt;p&gt;To work around this, all you need to do is to surround your whole object in parenthesis. This will not throw an error and your code will work as expected and also look good in the process.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This is perfectly valid&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Jane Doe&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInitialData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With this last part, we wrapped up all known usages of arrow functions in real-life, production apps. For more, in-depth knowledge on the subject, refer to my &lt;a href=&quot;/es6-arrow-functions-in-depth&quot; title=&quot;Link to article&quot; target=&quot;blank&quot;&gt;ES6 arrow functions in depth&lt;/a&gt; article, where I talk more about the internals of the arrow function.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:
&lt;a href=&quot;https://www.flickr.com/photos/pasukaru76/&quot;&gt;Pascal&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/bvcbis&quot;&gt;Killbot Assembly Line&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>If you are just getting started with ES6, you might have heard about “fat arrow functions”. They are a great addition to the ECMAScript 6 standard and their origin is probably the CoffeeScript function declaration. You can think of them as throwaway functions that a you can attach to a click or mouse event.
There are a couple of ways to use arrow functions and we are going to go over each one in turn.</summary></entry><entry><title>The fly theory of helpfulness</title><link href="https://codesi.nz/the-fly-theory-of-helpfulness/" rel="alternate" type="text/html" title="The fly theory of helpfulness" /><published>2016-08-17T00:00:00+03:00</published><updated>2016-08-17T00:00:00+03:00</updated><id>https://codesi.nz/the-fly-theory-of-helpfulness</id><content type="html" xml:base="https://codesi.nz/the-fly-theory-of-helpfulness/">&lt;p&gt;This article is the result of an experience I had a couple of days ago, before
going to bed. This made me realise that my eagerness to help people, sometimes 
does me and the people I’m trying to help a great disservice.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Trying to help people when they don’t think they have a problem or need help, 
is just like trying to take a fly out of your bedroom by grabbing it and throwing
it out the window — It just doesn’t work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was 12:45 AM, and I was getting ready to go to bed. I finished reading(listening)
&lt;a href=&quot;http://www.audible.com/pd/Science-Technology/Thinking-Fast-and-Slow-Audiobook/B005TKKCWC/ref=a_search_c4_1_1_srTtl?qid=1471449930&amp;amp;sr=1-1&quot; title=&quot;Audible.com book link&quot;&gt;Daniel Khaneman’s “Thinking fast and slow”&lt;/a&gt; 
and just when I reach over to turn my
bedside light off, I see a fly. Now, I’m not the biggest insect fan but given that they’re
living beings, I thought to myself: “I’m not going to kill it, I’ll catch it and
release it outside”. Instinctively, I did what was natural for a human trying to
catch something. I followed it carefully and then caught it in my palm.&lt;br /&gt;
Up to this point, everything went as planned. I caught the fly, now I’ll have to
release it. Realising that it has been caught by a “predator” the fly tries to escape,
and at that point, I thought that it would be better to squeeze my fist a bit.
I wasn’t going to let it slip through my fingers. Unfortunately, that was a big
mistake, as I managed to hurt the fly in the  process. I put the fly on the edge
of my window but it didn’t looked like it was in a condition to fly.
After closing the window, I realised that this is exactly what happens in most
cases when I spot a problem and try to help. Based on previous discussions with
friends, some of them were complaining about having the same problem.&lt;/p&gt;

&lt;p&gt;The problem is illustrated by any one of the quotes below:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;— I’m trying to help her and she acts like I have something against her!&lt;br /&gt;
— Why do people think that I’m judgemental whenever I point to them that 
they’re doing something wrong? I just want to help them realise their mistake.&lt;br /&gt;
— He’s upset with me because I asked him to change X. It’s for his own good!&lt;br /&gt;
— I tried to help them just like I did with those other people and they
replied that it’s offensive to them to do X. They also said that I should
be ashamed for trying to convince them to do that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at all the scenarios above and imagine yourself in the position of the
person being offered help. Your thoughts would probably be similar to the phrases below:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;— How can you say that this is wrong? And who the hell asked for your
opinion? I did not ask for your help!&lt;br /&gt;
— Thanks for letting me know what your self-appointed committee of one
thinks about me. I know what my problems are and X is not one of them.&lt;br /&gt;
— You just want me to change for your satisfaction and wellbeing, not
because it will do me any good. I’m fine being like this and doing X. X defines 
who I am, it’s part of my personality.&lt;br /&gt;
— What type of people do you think we are? How is this s##t supposed to
help us, are you trying to &lt;strong&gt;&amp;lt;insert situation they think you will put them in&amp;gt;&lt;/strong&gt;??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have been in any of the situations above, I bet it did not feel good.
I know I’ve been in all of them and many more that would require a series of
articles to list them all.&lt;br /&gt;
These are situations where people who &lt;strong&gt;YOU&lt;/strong&gt; think have a problem, don’t see that
problem. At least that’s what you think, that they don’t see it.&lt;br /&gt;
The thing you’re not taking into account is that they might know about it but 
don’t have the time to deal with it at the moment. 
Maybe it is not on their priority list, they might have other, 
more important things to tend to, before this. They may have received the feedback 
(and the offer for help) dozens of times by now, and you are person #101 
reminding them about it.  They may have otherwise listened to you, 
but they’re in a bad mood, it’s not the right time, other things are on their mind.&lt;/p&gt;

&lt;p&gt;And I can go on for ages, listing situations when people have good reasons to reject
your help and take you for a judgemental bastard. My 12-year smoker experience
qualifies me to do this. They left me with a lot of rationalizations 
and reasons why, for example, smoking is not a problem, 
how it is your only vice, how other people are drinking or taking drugs etc.&lt;/p&gt;

&lt;p&gt;Bottom line is that whenever you see someone in trouble, and would like to help,
take the time to find out if they think they need help, and how open they are
to receive what they might see as &lt;strong&gt;negative feedback&lt;/strong&gt;.&lt;br /&gt;
Note that what you might consider to be constructive feedback, some would see
as negative feedback.&lt;/p&gt;

&lt;p&gt;Also, don’t think that if a method worked well, on simliar occasions, with a
different person, it is a silver bullet that you can use for everyone who has that problem.&lt;/p&gt;

&lt;p&gt;For example, explaining to a junior programmer a concept like JavaScript closures, 
drastically differs from one programmer to the next. Even though they share a
common feature, the experience/career level, they might understand it differently
depending on their background. 
One of them might have studied programming since high-school while the other is
a self-taught, no-degree developer.&lt;/p&gt;

&lt;p&gt;Based on your field of expertise you might need a different approach when 
working with different sexes, ages or cultures.&lt;/p&gt;

&lt;p&gt;For example, if you are teaching a course to an audience of people in their 30s
try no to use a school teacher’s attitude and language. Don’t ask them to turn off
their phones, or make them put their phones in a box because they were texting
during your course.&lt;br /&gt;
Those come off as bad manners, as you might be talking to busy businesspeople 
who might not afford the luxury of “unplugging” themselves outside their vacation days.
An attitude like the one above, is a sure recipe to earn antipathy and lose
trust. As I have come to learn on my own skin, the feeling is that the person is 
being a smartass.&lt;/p&gt;

&lt;p&gt;It took me 28 years of existence and a fly in my bedroom, in the middle of the night, 
to realise that my do-good attitude doesn’t always do good :). 
Through this article, I would like to thank the people who had
the patience to learn things from me and I would like to apologise to the people
to whom I lacked patience; I hope our neurons will regenereate 😇.&lt;/p&gt;

&lt;p&gt;Bottom line, don’t think that the method for catching a calf that escaped from
the stables will also work for catching flies.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:
&lt;a href=&quot;https://www.flickr.com/photos/quinnanya/&quot;&gt;Quinn Dombrowski&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/e4vxUD&quot;&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>This article is the result of an experience I had a couple of days ago, before
going to bed. This made me realise that my eagerness to help people, sometimes 
does me and the people I’m trying to help a great disservice.</summary></entry><entry><title>Event delegation in TinyMCE plugins</title><link href="https://codesi.nz/event-delegation-in-tinymce-plugins/" rel="alternate" type="text/html" title="Event delegation in TinyMCE plugins" /><published>2016-07-05T00:00:00+03:00</published><updated>2016-07-05T00:00:00+03:00</updated><id>https://codesi.nz/event-delegation-in-tinymce-plugins</id><content type="html" xml:base="https://codesi.nz/event-delegation-in-tinymce-plugins/">&lt;p&gt;For the past week or so, I’ve been working with &lt;a href=&quot;https://www.tinymce.com/&quot;&gt;TinyMCE&lt;/a&gt;. For those of you
who don’t know what it is, I’ll just say this: it is a &lt;strong&gt;WYSIWYG&lt;/strong&gt; (What You See Is What You Get) editor, very
similar to the ones you find in popular blogging platforms like &lt;a href=&quot;https://wordpress.com/&quot;&gt;Wordpress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m working on a personal project, that involves parsing the content that the user inputs in the editor,
and generating a template that would later be rendered as a PDF. For the project’s specific needs,
I had to develop a small plugin that would display a popup when certain elements are clicked.&lt;br /&gt;
A thing I’ve struggled with the most was how to find elements in the editor’s DOM content. Once I had that
figured out, what I had to do was to place some event handlers on specific elements in the content.&lt;br /&gt;
Unfortunately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;tinymce.dom.DomQuery#on()&lt;/code&gt; method, is not similar to jQuery’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.on()&lt;/code&gt;. The main problem
is that it receives only 2 arguments, instead of 3, so you are not able to specify an element identifier to
which the application should delegate, let’s say, click events.
Below is a comparison of the two &lt;code class=&quot;highlighter-rouge&quot;&gt;.on()&lt;/code&gt; methods:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// jQuery.on()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.element&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;.delegate-child&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do stuff when .element receives clicks&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and the target is a .delegate-child element&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// tinymce.dom.DomQuery.on()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.element&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do stuff when .element receives clicks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, there is no way for us to register for click events on the &lt;code class=&quot;highlighter-rouge&quot;&gt;.delegate-child&lt;/code&gt; elements,
unless we bind a callback to each element, like below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tinymce.dom.DomQuery.on()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.delegate-child&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do stuff when .delegate-child receives clicks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem with the approach above is that if we add more &lt;code class=&quot;highlighter-rouge&quot;&gt;.delegate-child&lt;/code&gt; elements, further
down the road, those will not have the click handler registered, so clicking on them would not
trigger the desired behavior.&lt;/p&gt;

&lt;p&gt;Fortunately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; is being passed as an argument to our click handler, so we can use a combination of
&lt;code class=&quot;highlighter-rouge&quot;&gt;event.target.nodeName&lt;/code&gt;, to figure out if the node receiving the click is of the type we would like to delegate to.
We can also strengthen our verification by checking for a class name as well.&lt;br /&gt;
Take a look at the snippet below for the full example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tinymce.dom.DomQuery.on()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;span&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.formField&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CLICKED&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you would like to learn more about event delegation, and why is it beneficial,
check out the list of articles below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://davidwalsh.name/event-delegate&quot;&gt;https://davidwalsh.name/event-delegate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.jquery.com/events/event-delegation/&quot;&gt;https://learn.jquery.com/events/event-delegation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/javascript-event-delegation-is-easier-than-you-think/&quot;&gt;https://www.sitepoint.com/javascript-event-delegation-is-easier-than-you-think/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascript.info/tutorial/event-delegation&quot;&gt;http://javascript.info/tutorial/event-delegation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nczonline.net/blog/2009/06/30/event-delegation-in-javascript/&quot;&gt;https://www.nczonline.net/blog/2009/06/30/event-delegation-in-javascript/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully this saved you from a terrible headache! If you need any help or would like
to share your experience, you can do so by using the comments section or by tweeting at
&lt;a href=&quot;https://twitter.com/@codesinz&quot;&gt;@codesinz&lt;/a&gt; or at &lt;a href=&quot;https://twitter.com/@opreaadrian&quot;&gt;@opreaadrian&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:
&lt;a href=&quot;https://www.flickr.com/photos/kom-p/&quot;&gt;KOMPETENZZENTRUM: PRÄSENTATION&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/9ZPcVC&quot;&gt;Delegation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>For the past week or so, I’ve been working with TinyMCE. For those of you
who don’t know what it is, I’ll just say this: it is a WYSIWYG (What You See Is What You Get) editor, very
similar to the ones you find in popular blogging platforms like Wordpress.</summary></entry><entry><title>Configuring Git - multiple identities</title><link href="https://codesi.nz/configuring-git-multiple-identities/" rel="alternate" type="text/html" title="Configuring Git - multiple identities" /><published>2016-06-29T00:00:00+03:00</published><updated>2016-06-29T00:00:00+03:00</updated><id>https://codesi.nz/configuring-git-multiple-identities</id><content type="html" xml:base="https://codesi.nz/configuring-git-multiple-identities/">&lt;p&gt;I’ve been a freelancer for quite some time, and for approximately the same amount
of time, I’ve been making the same mistake, over and over, again. Whenever I had
to work for multiple customers in the same period of time, I would always mix-up
the email addresses in my Git configuration, and end up committing code on
a client’s codebase and sign it with the email and details from another client.&lt;/p&gt;

&lt;p&gt;And it was all because of the two commands below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ git config --global user.name &quot;Adrian Oprea&quot;
$ git config --global user.email &quot;company@email.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whenever I looked for help on how to set my name/email configuration in Git,
I found these two commands. It doesn’t matter which Git provider you’re using,
GitHub or GitLab, it’s all the same. So I did what everyone would do, I copied
and pasted those commands over and over again.&lt;/p&gt;

&lt;p&gt;There’s nothing wrong with setting a global name/email in your git configuration,
I have them set up for my public/open-source projects, but for your client projects,
use the local config. This way, you’ll have project-specific configuration, at the
project level, and shared settings at the global level.&lt;/p&gt;

&lt;p&gt;So instead of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt; flag, just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--local&lt;/code&gt; flag, and
everything will be set at the repository level, in the local config file — &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to configure my details on a repository basis, all you to do is to paste
the following lines, in the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ git config --local user.name &quot;Adrian Oprea&quot;
$ git config --local user.email &quot;company@email.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that you can keep your global settings intact and only update the
configuration at the local level.&lt;/p&gt;

&lt;h3 id=&quot;bonus&quot;&gt;Bonus&lt;/h3&gt;

&lt;p&gt;To view all the values that are currently set at the local/global level run
one of the following commands in your terminal emulator of choice:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git config --local --list
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Have a tip you would like to share with others? Feel free to do so, in the comments section.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:
&lt;a href=&quot;https://www.flickr.com/photos/harinaivoteza/&quot;&gt;Teza Harinaivo Ramiandrisoa&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/bKW1jF&quot;&gt;Cameleon colors&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>I’ve been a freelancer for quite some time, and for approximately the same amount
of time, I’ve been making the same mistake, over and over, again. Whenever I had
to work for multiple customers in the same period of time, I would always mix-up
the email addresses in my Git configuration, and end up committing code on
a client’s codebase and sign it with the email and details from another client.</summary></entry><entry><title>ES6 arrow functions in depth</title><link href="https://codesi.nz/es6-arrow-functions-in-depth/" rel="alternate" type="text/html" title="ES6 arrow functions in depth" /><published>2016-05-19T00:00:00+03:00</published><updated>2016-05-19T00:00:00+03:00</updated><id>https://codesi.nz/es6-arrow-functions-in-depth</id><content type="html" xml:base="https://codesi.nz/es6-arrow-functions-in-depth/">&lt;p&gt;One of the prettiest features of ES6, it could easily win a beauty contest, if such a contest would be held. What many people don’t know is that the arrow function is not simply a form of syntactic sugar that we can use instead of the regular callback.
As I like to explain it to the people who attend my trainings/workshops, arrow functions are &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;-less, &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;-less, &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt;-less and &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;-less.
Let us now get past the shorter syntax and dive deeper into the specifics of the arrow function.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#lexically-bound-this&quot; id=&quot;markdown-toc-lexically-bound-this&quot;&gt;Lexically-bound this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lexical-arguments&quot; id=&quot;markdown-toc-lexical-arguments&quot;&gt;Lexical arguments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-characteristics&quot; id=&quot;markdown-toc-other-characteristics&quot;&gt;Other characteristics&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#implicit-return&quot; id=&quot;markdown-toc-implicit-return&quot;&gt;Implicit return&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#no-new-calls&quot; id=&quot;markdown-toc-no-new-calls&quot;&gt;No &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; calls&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#no-newtarget&quot; id=&quot;markdown-toc-no-newtarget&quot;&gt;No &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#closing-thoughts&quot; id=&quot;markdown-toc-closing-thoughts&quot;&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#update-1&quot; id=&quot;markdown-toc-update-1&quot;&gt;Update 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#update-2&quot; id=&quot;markdown-toc-update-2&quot;&gt;Update 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lexically-bound-this&quot;&gt;Lexically-bound this&lt;/h2&gt;

&lt;p&gt;Previously, regular functions would have their &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; value set to the global object if they were used as callbacks, to a new object in case they were called with the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator or, in the case of libraries like jQuery, they would be set to the object that triggered an event in case of event handlers, or the current element in a &lt;code class=&quot;highlighter-rouge&quot;&gt;$.each&lt;/code&gt; iteration.This situation proved very confusing even for experienced developers.
Let’s say you have a piece of code like the one below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nameValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;initializeHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;blur&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initializeHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem is that &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt; event handler is set to the global object rather than obj. In strict mode — &lt;code class=&quot;highlighter-rouge&quot;&gt;‘use strict’;&lt;/code&gt; — you risk breaking your application because &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. In order to side-step this issue we have two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Convert the event handler to a function bound to the outer scope, using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use the dirty &lt;code class=&quot;highlighter-rouge&quot;&gt;var self = this;&lt;/code&gt; expression in the &lt;code class=&quot;highlighter-rouge&quot;&gt;initializeHandlers&lt;/code&gt; function (I see this as a hack)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both options are illustrated below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;initializeHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// more elegant but we can do better&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blurHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;blur&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blurHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;initializeHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ugly and error-prone&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;blur&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On the other hand, arrow functions have no internal context. They inherit their context from the outer scope. Let’s take a look at how arrow functions solve this problem.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nameValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;initializeHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;nameInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;blur&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// this references obj instead of the global object&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In our new implementation &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is a hard reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; object and doesn’t get lost due to nesting.&lt;/p&gt;

&lt;h2 id=&quot;lexical-arguments&quot;&gt;Lexical arguments&lt;/h2&gt;

&lt;p&gt;Have you ever tried to access the &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; object inside an arrow function? I have, and I wasted 3 solid hours trying to figure out why do I get the arguments of the outer function instead of those of the arrow functions.
Thankfully, MDN exists, and as good practice dictates, you check the documentation at the end, when you sit in a corner, knees tucked to your chest, rocking and repeating to yourself: “I should have been a carpenter!”
Fun aside, arrow functions do not expose an &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; object. If you try to access it, you will get the arguments of the surrounding function. In our case, given the fact that the outer function is an arrow function as well, and we have no more functions further up the chain, we will get a &lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variadicAdder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variadicAdderOf5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variadicAdder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variadicAdderOf5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ReferenceError: arguments is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is no fix here, as there is nothing broken. What we can do is to return a plain function, rather than an arrow, from our &lt;code class=&quot;highlighter-rouge&quot;&gt;variadicAdder()&lt;/code&gt;.
This will give us the opportunity to access the &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; object without an issue. The updated code will look like the one below with the only difference
that it will actually work and not throw an error.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variadicAdder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variadicAdderOf5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variadicAdder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variadicAdderOf5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 38&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To find out more about &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.reduce&lt;/code&gt;, head to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-characteristics&quot;&gt;Other characteristics&lt;/h2&gt;
&lt;p&gt;As I mentioned in the introductory section of this article, arrow functions have several more characteristics besides the context and the arguments.&lt;/p&gt;

&lt;h3 id=&quot;implicit-return&quot;&gt;Implicit return&lt;/h3&gt;
&lt;p&gt;A very powerful feature is the ability to implicitly return the result of the logic being executed within it. This is available only for functions that have a single block of code as their body and it is called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Function_body&quot; title=&quot;More info on arrow functions concise body&quot;&gt;concise body / block body&lt;/a&gt;. Basically, if your function is a one-liner, then you can use concise notation and reap the benefits.&lt;/p&gt;

&lt;p&gt;Take a look at the example below and let’s see how we can simplify it and make use of this powerful feature.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regularMultiplyBy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplyBy2Arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplyBy2ArrowWithImplicitReturn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can even go a step further and remove the parens around the function’s argument.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiplyBy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;no-new-calls&quot;&gt;No &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; calls&lt;/h3&gt;

&lt;p&gt;Being completely anonymous and dependent on their surrounding context, you are unable to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator with arrow functions. As a direct implication, arrow functions also don’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;. Snippets like the one below would simply throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// TypeError: Person is not a constructor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;no-newtarget&quot;&gt;No &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The third characteristic, which is as well, a direct implication of the inability to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator, is the fact that arrow functions don’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt;. In a nutshell, &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt; allows you to detect whether or not a function has been called as a constructor.
Arrow functions, inherit &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt; from their surrounding scope. If the outer scope is a function, and it is called like a constructor (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;new Person(&#39;Adrian&#39;);&lt;/code&gt;), then &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt; will point to the outer function.
The Mozilla Developer Network hosts a detailed explanation on &lt;code class=&quot;highlighter-rouge&quot;&gt;new.target&lt;/code&gt; and I encourage you to check it out.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;Now that you got a bit more detail into how arrow functions work, go and use them like they were intended!
I can’t help recommending that you go through the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference&quot;&gt;Mozilla Developer Network JavaScript Reference&lt;/a&gt; as
there is an abundance of knowledge that will help you in the long run, in your web development career.
Feel free to leave comments, suggest edits and especially share with your peers.&lt;/p&gt;

&lt;h2 id=&quot;update-1&quot;&gt;Update 1&lt;/h2&gt;

&lt;p&gt;Added the &lt;a href=&quot;#implicit-return&quot;&gt;&lt;strong&gt;Implicit return&lt;/strong&gt;&lt;/a&gt; section.&lt;/p&gt;

&lt;h2 id=&quot;update-2&quot;&gt;Update 2&lt;/h2&gt;

&lt;p&gt;Just published an article called &lt;a href=&quot;/es6-arrow-functions-production/&quot; title=&quot;Article link: Using ES6 arrow functions in production-ready apps&quot;&gt;Using ES6 arrow functions in production-ready apps&lt;/a&gt; that is directly tied to this article.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:
&lt;a href=&quot;https://www.flickr.com/photos/elzey/&quot;&gt;Richard Elzey&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/9ZDxat&quot;&gt;Arrow Signs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>One of the prettiest features of ES6, it could easily win a beauty contest, if such a contest would be held. What many people don’t know is that the arrow function is not simply a form of syntactic sugar that we can use instead of the regular callback.
As I like to explain it to the people who attend my trainings/workshops, arrow functions are this-less, arguments-less, new.target-less and super-less.
Let us now get past the shorter syntax and dive deeper into the specifics of the arrow function.</summary></entry><entry><title>An SSH workflow that’s easier on your brain</title><link href="https://codesi.nz/an-ssh-workflow-easier-on-the-brain/" rel="alternate" type="text/html" title="An SSH workflow that&#39;s easier on your brain" /><published>2016-05-05T00:00:00+03:00</published><updated>2016-05-05T00:00:00+03:00</updated><id>https://codesi.nz/an-ssh-workflow-easier-on-the-brain</id><content type="html" xml:base="https://codesi.nz/an-ssh-workflow-easier-on-the-brain/">&lt;p&gt;In this quick tip, I will share my SSH workflow and how I manage things
when it comes to working with multiple remote machines.
Unlike “the old days” when we used to have Apache installed locally on our
machines — I see you Mamp Server users — now, with the rise of cloud
providers like Amazon, Digital Ocean or Microsoft Azure, and  products such as
Docker, we are working more and more on systems that are spread accross multiple
machines, instances, containers, you name it.&lt;/p&gt;

&lt;p&gt;Part of my daily routine is working on certain machines that are usually
accessible via SSH and my biggest problem, currently, is remembering the ip
addresses of the machines I want to connect to, or at
least part of the ip addresses so I can do a quick reverse-i-search
(&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+R&lt;/code&gt; on any machine using bash, zsh).&lt;br /&gt;
You’re probably thinking: “Maybe you should just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt; shell and rely
on its awesome command completion functionality”, and you are right, but not
even the almighty &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt; shell can save me, so I’ve developed a habit of using my
ssh config as much as possible.&lt;br /&gt;
The normal way you would connect to a server through SSH would be to issue the
following command: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh user@192.168.1.1&lt;/code&gt;, insert your password and you’re done.&lt;/p&gt;

&lt;p&gt;The approach above makes four false assumptions about me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I know/remember the username(ok for 1-2 machines, not ok for 10-15)&lt;/li&gt;
  &lt;li&gt;I know/remember the IP address&lt;/li&gt;
  &lt;li&gt;I know/remember the password&lt;/li&gt;
  &lt;li&gt;I am able to type my password correctly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Honestly, I am able to remember everything I mentioned above,for 1-2 servers,
but I have to work with 5+ servers, and no two configurations
are the same. For this, I have a solution that is called &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_config&lt;/code&gt;.
It usually resides on your machine, in your &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.ssh/&lt;/code&gt; directory
(assuming you have &lt;a href=&quot;http://www.openssh.com/&quot;&gt;openssh&lt;/a&gt; installed on your machine).
To check whether or not you already have the file available on your system, run
the first command from the snippet below, and see if your output is similar to mine,
and if not, follow the instructions to create it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# List all information about the config file, under the ssh/ directory&lt;/span&gt;
adrian@zen ~/D/blog&amp;gt; ls -al ~/.ssh/config
-rw-r--r--  1 adrian  staff  210 Mar  1 13:59 /Users/adrian/.ssh/config

&lt;span class=&quot;c&quot;&gt;# If you get &quot;No such file or directory [...]&quot;, run the command below&lt;/span&gt;
adrian@zen ~/D/blog&amp;gt; touch ~/.ssh/config

&lt;span class=&quot;c&quot;&gt;# Check again, to see if the file has been properly created&lt;/span&gt;
adrian@zen ~/D/blog&amp;gt; ls -al ~/.ssh/config
-rw-r--r--  1 adrian  staff  0 Mar  1 17:12 /Users/adrian/.ssh/config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that you’ve created the config file, let’s add stuff to it. A typical
configuration, would contain things like the alias you would like to give to
your server, your username on that machine, your preferred authentication
method, and by putting it all together, you get something similar to the snippet
below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host remote-machine                       &lt;span class=&quot;c&quot;&gt;# The shorter name you will use with the ssh command&lt;/span&gt;
  HostName 192.168.33.10                  &lt;span class=&quot;c&quot;&gt;# The machine&#39;s IP address or hostname&lt;/span&gt;
  User adrian                             &lt;span class=&quot;c&quot;&gt;# Your username on the machine&lt;/span&gt;
  IdentityFile ~/.ssh/remote_machine.key  &lt;span class=&quot;c&quot;&gt;# If you don&#39;t want to type the password every time, get one of these&lt;/span&gt;
  RemoteForward 5858 5858                 &lt;span class=&quot;c&quot;&gt;# Port forwarding (for tunnelling) - I use it for NodeJS remote debug&lt;/span&gt;
  ForwardAgent yes                        &lt;span class=&quot;c&quot;&gt;# Forward the ssh key to machines that you connect to from the remote machine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A short explanation for each line has been added for each line in the
configuration but in order to reap all the benefits that an &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; config file
has to offer, I encourage you to go through
&lt;a href=&quot;http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/ssh_config.5&quot;&gt;the documentation for &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_config&lt;/code&gt;&lt;/a&gt;,
or type &lt;code class=&quot;highlighter-rouge&quot;&gt;man ssh_config&lt;/code&gt; in your preferred terminal emulator.&lt;/p&gt;

&lt;p&gt;To get a better idea on how a full &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_config&lt;/code&gt; file would look like, you can
take a look at the snippet below, that shows a multi-machine config with all
the bells and whistles.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is my git server&lt;/span&gt;
Host git
  HostName 192.168.33.10
  User adrian
  IdentityFile ~/.ssh/git_server.key

&lt;span class=&quot;c&quot;&gt;# I use this to connect to other machines on the same network&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# hence, I&#39;m forwarding my connection to the authentication agent&lt;/span&gt;
Host manager
  HostName 192.168.38.1
  User root
  IdentityFile ~/.ssh/manager.key
  ForwardAgent yes

&lt;span class=&quot;c&quot;&gt;# Forwarding port 5858 to localhost for remote debugging  &lt;/span&gt;
Host nodejs
  HostName 192.168.33.11
  User adrian
  IdentityFile ~/.ssh/nodejs.key
  RemoteForward 5858 5858
  
Host db
  HostName 192.168.33.12
  User root
  IdentityFile ~/.ssh/db.key
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In order to connect to any of those machines, I just need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh &amp;lt;Host&amp;gt;&lt;/code&gt;, so,
if I would like to connect to my &lt;code class=&quot;highlighter-rouge&quot;&gt;manager&lt;/code&gt; instance, all I need to do is run
&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh manager&lt;/code&gt;. Would you prefer to &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh root@192.168.38.1&lt;/code&gt; and then having
to type your password, every time? Didn’t think so.&lt;br /&gt;
I really hope you enjoyed this short article and that the knowledge you get from
it helps you spend less time on the mundane tasks and more on the creative side
of our jobs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:&lt;br /&gt;
&lt;a href=&quot;https://www.flickr.com/photos/sdelgado&quot;&gt;BMiz&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/fNBLwz&quot;&gt;Productivity - this is working from home…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>In this quick tip, I will share my SSH workflow and how I manage things
when it comes to working with multiple remote machines.
Unlike “the old days” when we used to have Apache installed locally on our
machines — I see you Mamp Server users — now, with the rise of cloud
providers like Amazon, Digital Ocean or Microsoft Azure, and  products such as
Docker, we are working more and more on systems that are spread accross multiple
machines, instances, containers, you name it.</summary></entry><entry><title>Serializing object methods using ES6 template strings and eval</title><link href="https://codesi.nz/serializing-object-methods-with-ES6-template-strings-and-eval/" rel="alternate" type="text/html" title="Serializing object methods using ES6 template strings and eval" /><published>2016-02-29T00:00:00+02:00</published><updated>2016-02-29T00:00:00+02:00</updated><id>https://codesi.nz/serializing-object-methods-with-ES6-template-strings-and-eval</id><content type="html" xml:base="https://codesi.nz/serializing-object-methods-with-ES6-template-strings-and-eval/">&lt;p&gt;Understanding the way AJAX and JSON manipulation work in JavaScript could make 
the difference between writing an elegant, easy to reason about application, 
and a crude hack. As far as my experience goes, only a small number of developers 
I’ve talked to in the past year or so, know how to write a vanilla 
&lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt;, from scratch. I do agree that it is important to get the 
job done in a timely manner and not reinvent the wheel, but using something 
without understanding it’s substance is something that I cannot come to terms 
with, for someone other than a junior developer.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#a-bit-of-background&quot; id=&quot;markdown-toc-a-bit-of-background&quot;&gt;A bit of background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-json&quot; id=&quot;markdown-toc-what-is-json&quot;&gt;What is JSON?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-serialization&quot; id=&quot;markdown-toc-what-is-serialization&quot;&gt;What is serialization?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#object-serialization-and-the-replacer-function&quot; id=&quot;markdown-toc-object-serialization-and-the-replacer-function&quot;&gt;Object serialization and the &lt;strong&gt;replacer&lt;/strong&gt; function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#de-serialization-and-reviving-properties&quot; id=&quot;markdown-toc-de-serialization-and-reviving-properties&quot;&gt;De-serialization and reviving properties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-bit-of-background&quot;&gt;A bit of background&lt;/h2&gt;

&lt;p&gt;I’ve been working with JSON since 2009 and all I knew is that you are able to 
serialize JavaScript objects, by using &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify&lt;/code&gt; but only the properties
(values) get serialized, and the methods get left behind.
I started looking into the literature around JSON serialization in JavaScript 
and the only information I found on JSON.org and the Mozilla Developer Network 
confirmed what I already said before, so then I started to think about the 
“forbidden” parts of JavaScript.&lt;/p&gt;

&lt;p&gt;In my case, I started learning JavaScript reading
&lt;a href=&quot;http://amzn.com/0596517742&quot;&gt;JavaScript The Good Parts&lt;/a&gt; written by 
&lt;a href=&quot;http://crockford.com/&quot;&gt;Douglas Crockford&lt;/a&gt; and if you’re like me, 
the rest of your career was highly influenced by that book and Crockford’s 
approach to JavaScript and software development. But everything comes at a cost, 
and the cost I had to pay was believing too much in the “Eval is evil” mantra.&lt;/p&gt;

&lt;h2 id=&quot;what-is-json&quot;&gt;What is JSON?&lt;/h2&gt;

&lt;p&gt;First, let’s start with some basics, namely, let’s see what JSON is.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON.org&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JSON (JavaScript Object Notation) is a lightweight data-interchange format. […]
JSON is a text format that is completely language independent but uses 
conventions that are familiar to programmers of the C-family of languages […]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON&quot;&gt;Mozilla Developer Network&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, 
and null. It is based upon JavaScript syntax but is distinct from it: 
some JavaScript is not JSON, and some JSON is not JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Both definitions tell us one thing: JSON is a format for distributing data 
across “the wire” and can be easily understood and generated by both 
humans and computers.&lt;/p&gt;

&lt;h2 id=&quot;what-is-serialization&quot;&gt;What is serialization?&lt;/h2&gt;

&lt;p&gt;Again, in order to continue, we first need to establish what serialization is, 
and without having to resort to external resources for this, I will give you 
my own definition: “Serialization is a process through which one data format gets 
translated to an intermediary data format, for the purpose of distribution”.&lt;/p&gt;

&lt;p&gt;The reverse of serialization is de-serialization, where you take a the 
intermediary data format and turn it back into its original form, so you can 
manipulate it and use it in your application.&lt;br /&gt;
Now, with theory out of the way, let’s get to the code.&lt;/p&gt;

&lt;h2 id=&quot;object-serialization-and-the-replacer-function&quot;&gt;Object serialization and the &lt;strong&gt;replacer&lt;/strong&gt; function&lt;/h2&gt;

&lt;p&gt;Based on the knowledge we have at this point, we can now demonstrate how exactly 
serialization works, so let’s take an object, run it through &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify&lt;/code&gt; 
and see what we get.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Susan&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Susan says hi!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {&quot;name&quot;:&quot;Susan&quot;,&quot;age&quot;:24} &lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;string&#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; method is nowhere to be seen. The reason is that 
&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify&lt;/code&gt; serializes only the properties of the object, leaving its 
methods behind.&lt;br /&gt;
Now, let’s say we want to also serialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; method. How would we go about 
that? First, let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify&lt;/code&gt;’s signature, outlined below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; value(required) - the object we want to serialize &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; replacer(optional) - a function that will be called for each of the &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    object&#39;s properties, or an array of strings and numbers that serve &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    as a whitelist for the property selection process&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; space(optional) - the number of spaces each key will receive as indent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our main interest is the &lt;code class=&quot;highlighter-rouge&quot;&gt;replacer&lt;/code&gt; argument, and we are going to use its function form. In order 
for this trick to work and for the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; method’s code to be properly converted to a string, 
we can call its &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; method.&lt;br /&gt;
Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; on a function, returns a string representation of the function’s body. 
This way, if we call &lt;code class=&quot;highlighter-rouge&quot;&gt;person.sayHi.toString()&lt;/code&gt; we will get the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;function () { console.log(&#39;Susan says hi!&#39;); }&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So now that we know how to get our method’s body, let’s build the logic to serialize the whole 
&lt;code class=&quot;highlighter-rouge&quot;&gt;person&lt;/code&gt; object, including its method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Susan&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Susan says hi!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if we get a function, give us the code for that function&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;function&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// get a stringified version of our object, and indent the keys at 2 spaces&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// {&quot;name&quot;:&quot;Susan&quot;,&quot;age&quot;:24,&quot;sayHi&quot;:&quot;function () {\n\tconsole.log(&#39;Susan says hi!&#39;);\n  }&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;de-serialization-and-reviving-properties&quot;&gt;De-serialization and reviving properties&lt;/h2&gt;

&lt;p&gt;As you can see, we now have our method, properly serialized and ready for 
transportation “across the wire”. What we need to do next is to de-serialize 
our object and make the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; method executable, again, and this can be 
accomplished using &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similar to what we did with &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify&lt;/code&gt;, we will have to take a look at 
&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse&lt;/code&gt;’s signature in order to get a clearer view of how we will 
perform the de-serialization process in such a way that we can convert our 
current &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; string into a function, again.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse&lt;/code&gt; has the following signature, according to the Mozilla Developer Network:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reviver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; text(required) - the string we wish to de-serialize and convert back&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    to a standard JavaScript object(JSON)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; reviver(optional) - function used to pre-process keys and values in order &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    to render a specific object structure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before going any further with the solution, let’s first see what template 
strings are, at their most basic level.
According to MDN, template literals(usually called template strings) are string 
literals that allow embedded expressions. To simplify this explanation, let’s 
take a look at a piece of code using ES6 template strings and compare it to the 
way we used to mimic this in ES5.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ES6 template strings&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someComputedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;theTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someComputedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &quot;This is the result of the computation: 8&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ES5 version&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someComputedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;theTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;This is the result of the computation: &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someComputedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &quot;This is the result of the computation: 8&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can probably see some good use-cases for template literals, one of them 
being DOM templates. If you’d like 
more info on the topic, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;this page on the Mozilla Developer Network&lt;/a&gt; 
sums it up pretty well.&lt;/p&gt;

&lt;p&gt;Given that we already have our serialized version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;person&lt;/code&gt; object, along 
with its &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; method, let’s now try to convert the body of the method back to 
executable code.&lt;br /&gt;
For this matter, we’re going to have to resort to the “evil” &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; and before 
using something that so many people labelled as evil, let’s see what it does, 
so we are conscious about the risks we’re taking.&lt;/p&gt;

&lt;p&gt;In a nutshell, &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; takes strings and treats them as executable code. One of 
the biggest risks you’re exposing yourself and your application to would be 
&lt;a href=&quot;https://www.owasp.org/index.php/Code_Injection&quot;&gt;code injection&lt;/a&gt;. If you end up 
serializing user-inserted data, be sure to thoroughly validate their input and 
as a rule of thumb, don’t run code inserted by your user, unless you’re building 
the next &lt;a href=&quot;https://jsbin.com&quot;&gt;jsbin.com&lt;/a&gt; or the next &lt;a href=&quot;https://codepen.io&quot;&gt;codepen.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the knowledge we have about &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; and template strings, we can now 
build our &lt;code class=&quot;highlighter-rouge&quot;&gt;reviver&lt;/code&gt; function as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reviver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;string&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;function &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;functionTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;functionTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The code is pretty self-explanatory, but for extra clarity, we’re building a new 
template for all the items in the string we’re parsing, that contain the 
‘function’ keyword followed by a space, at the very beginning and then we’re 
evaluating the resulting expression and returning it to &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse&lt;/code&gt; in order to 
be added to the final object.&lt;br /&gt;
The final version of the code would look like the snippet below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// serialize.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Susan&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Susan says hi!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if we get a function, give us the code for that function&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;function&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// get a stringified version of our object, and indent the keys at 2 spaces&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// {&quot;name&quot;:&quot;Susan&quot;,&quot;age&quot;:24,&quot;sayHi&quot;:&quot;function () {\n\tconsole.log(&#39;Susan says hi!&#39;);\n  }&quot;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// de_serialize.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reviver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;string&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;function &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;functionTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;functionTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parsedObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reviver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;parsedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Susan says hi!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The reason that we wrap the function in parentheses is that we need to force 
the vm to evaluate the function in an expression context, and our function 
needs to be a function expression as it is missing its name. We are only operating 
with &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; on the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; key, which is an unnamed function. If 
you’d like more info about this limitation of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; take a look at 
&lt;a href=&quot;http://stackoverflow.com/a/9076377/2423398&quot;&gt;this answer on StackOverflow&lt;/a&gt;.&lt;br /&gt;
As you can see, the newly resulted object has the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi&lt;/code&gt; method available and 
ready for use and executing the method prints the same message as &lt;code class=&quot;highlighter-rouge&quot;&gt;person.sayHi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another issue I ommitted to mention about &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; is that it is pretty slow, 
because it has to invoke the VM in order to evaluate the code, 
unlike the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; constructor, which is highly optimised in newer 
versions of JavaScript engines.
If performance is something that is critical for you, there’s an option to use 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; constructor instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;reviver&lt;/code&gt; function like 
in the snippet below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reviver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;string&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;function &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;functionTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;functionTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even though it is said that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; constructor is faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;, 
be cautious that in this case, you have to create 2 functions in-memory —
the outer IIFE that gets auto-executed and returns the method we want.&lt;br /&gt;
You also need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Function.prototype.call&lt;/code&gt; in order to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 
relative to the current object, and not to the window/global object.&lt;/p&gt;

&lt;p&gt;Ultimately, it all comes down to personal preference so whether you use &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; 
or another method it is all up to you, the important thing is to use what 
makes the most sense for you and gets the job done in an elegant manner.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://json.org/&quot;&gt;JSON.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/a/9076377/2423398&quot;&gt;JavaScript eval() “syntax error” on parsing a function string&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON&quot;&gt;JSON&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/eval&quot;&gt;Eval&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Photo credits:&lt;br /&gt;
&lt;a href=&quot;https://www.flickr.com/photos/sdelgado&quot;&gt;Sergio Delgado&lt;/a&gt; — &lt;a href=&quot;https://en.wikipedia.org/wiki/Sloth&quot;&gt;Three-toed sloth in the Dallas World Aquarium&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>Understanding the way AJAX and JSON manipulation work in JavaScript could make 
the difference between writing an elegant, easy to reason about application, 
and a crude hack. As far as my experience goes, only a small number of developers 
I’ve talked to in the past year or so, know how to write a vanilla 
XMLHttpRequest, from scratch. I do agree that it is important to get the 
job done in a timely manner and not reinvent the wheel, but using something 
without understanding it’s substance is something that I cannot come to terms 
with, for someone other than a junior developer.</summary></entry><entry><title>Becoming a better JavaScript developer</title><link href="https://codesi.nz/becoming-a-better-javascript-developer/" rel="alternate" type="text/html" title="Becoming a better JavaScript developer" /><published>2015-12-21T00:00:00+02:00</published><updated>2015-12-21T00:00:00+02:00</updated><id>https://codesi.nz/becoming-a-better-javascript-developer</id><content type="html" xml:base="https://codesi.nz/becoming-a-better-javascript-developer/">&lt;p&gt;A week ago I saw a very interesting question on Quora, titled:  &lt;a href=&quot;https://www.quora.com/What-should-I-do-to-become-an-enterprise-level-professional-in-JavaScript/&quot;&gt;What should I do to become an enterprise level professional in JavaScript?&lt;/a&gt;. In this article, you will find my answer to this question, as I intend to keep it as a reference for everybody interested in the subject. I’d like to mention that writing this answer was highly beneficial for me, as I had to look back at my past and think about my actions and how they determined the path that I took in my career as a software development professional.
One thing worth mentioning is the fact that I don’t yet consider myself an “enterprise JavaScript developer”, even though I have been called by that name. I’m a software developer with a sweet tooth for JavaScript, that’s it.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-actual-answer&quot; id=&quot;markdown-toc-the-actual-answer&quot;&gt;The actual answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-actual-answer&quot;&gt;The actual answer&lt;/h2&gt;
&lt;p&gt;First and foremost let me start by saying that I met “enterprise JavaScript” developers who are not that skilled in JavaScript, simply because the “enterprise” limits all their creativity by being more restrictive in terms of technologies.
On the other hand, they tend to be good at overall architecture, they think a lot in terms of scalability and durability.&lt;/p&gt;

&lt;p&gt;Now, on to the list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Learn JavaScript. I mean it! Learn the language, how it works, what is lexical scoping, how do all the data types work.&lt;/li&gt;
  &lt;li&gt;Find some coding standards documents - there are quite a few - and take the gist from all of them(i’ll provide a list at the end)&lt;/li&gt;
  &lt;li&gt;Learn some utility libraries like jQuery, lodash,  zepto&lt;/li&gt;
  &lt;li&gt;Learn object-oriented programming&lt;/li&gt;
  &lt;li&gt;Learn functional programming&lt;/li&gt;
  &lt;li&gt;Learn a framework or two - at least the basic concepts - Angular and React are good candidates for that.&lt;/li&gt;
  &lt;li&gt;Learn design pattenrs - &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;Essential JavaScript Design patterns by Addy Osmani&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Look at the frameworks again, from a different perspective, that of the implementation&lt;/li&gt;
  &lt;li&gt;Learn how to optimize for performance, in the browser&lt;/li&gt;
  &lt;li&gt;Learn NodeJS, if you plan on going full stack&lt;/li&gt;
  &lt;li&gt;Find some interesting, open source projects that you can work on, or create your own.&lt;/li&gt;
  &lt;li&gt;Read a lot of code - get a project that you like and simply observe the structure, the patterns, the coding style.&lt;/li&gt;
  &lt;li&gt;Write a lot of code - nothing sticks unless you use it, reading is not enough, you need to write JavaScript, day-in-day-out&lt;/li&gt;
  &lt;li&gt;Be humble. Don’t think that if you know a lot, you’re better than others. We tend to fall into this trap too often.&lt;/li&gt;
  &lt;li&gt;Share your knowledge. Blog, tweet, go to meetups and give presentations do podcasting, whatever your preferred method of expression is
Here are some resources to get you on your way:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Books:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596517748.do&quot;&gt;JavaScript, the Good Parts by Douglas Crockford&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9781118026694.do&quot;&gt;Professional JavaScript for web developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596805531.do&quot;&gt;JavaScript The definitive Guide by David Flanagan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920025245.do&quot;&gt;Maintainable JavaScript by Nicholas Zakas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nczonline.net&quot;&gt;Nicholas Zakas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.2ality.com/&quot;&gt;Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/&quot;&gt;Sitepoint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://robots.thoughtbot.com/&quot;&gt;Thoughtbot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.airpair.com&quot;&gt;AirPair&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/&quot;&gt;Nicolas Bevacqua&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Style guides:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml&quot;&gt;Google’s JavaScript style guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;AirBnB’s JavaScript style guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rwaldron/idiomatic.js/&quot;&gt;IdiomaticJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/styleguide/javascript&quot;&gt;Github’s style guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Online training:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pluralsight.com&quot;&gt;Pluralsight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://egghead.io&quot;&gt;egghead.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bento.io/&quot;&gt;Bento.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/&quot;&gt;Envato Tuts+ Free Code Tutorials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://superherojs.com/&quot;&gt;SuperheroJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Podcasts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An article I wrote : &lt;a href=&quot;https://codesi.nz/my-favorite-podcasts/&quot;&gt;My favorite podcasts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/opreaadrian/great-podcasts&quot;&gt;A git repository with interesting dev podcasts&lt;/a&gt; - feel free to contribute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One last thing: don’t go learning everything out there in terms of frameworks, if you’re not planning on using them.
You will only waste precious time and memory on useless stuff. Set small(reaaaaally small) achievable goals for yourself and make sure you stick to them.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My Quora answer — &lt;a href=&quot;https://www.quora.com/What-should-I-do-to-become-an-enterprise-level-professional-in-JavaScript/answer/Adrian-Oprea&quot;&gt;What should I do to become an enterprise level professional in JavaScript?&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;Credits:&lt;br /&gt;
&lt;a href=&quot;https://www.flickr.com/photos/dvids/&quot;&gt;DVIDSHUB&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/5KpvAf&quot;&gt;Fitness Test Shows Marines a Taste of Combat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>A week ago I saw a very interesting question on Quora, titled:  What should I do to become an enterprise level professional in JavaScript?. In this article, you will find my answer to this question, as I intend to keep it as a reference for everybody interested in the subject. I’d like to mention that writing this answer was highly beneficial for me, as I had to look back at my past and think about my actions and how they determined the path that I took in my career as a software development professional.
One thing worth mentioning is the fact that I don’t yet consider myself an “enterprise JavaScript developer”, even though I have been called by that name. I’m a software developer with a sweet tooth for JavaScript, that’s it.</summary></entry><entry><title>My favorite podcasts</title><link href="https://codesi.nz/my-favorite-podcasts/" rel="alternate" type="text/html" title="My favorite podcasts" /><published>2015-12-05T00:00:00+02:00</published><updated>2015-12-05T00:00:00+02:00</updated><id>https://codesi.nz/my-favorite-podcasts</id><content type="html" xml:base="https://codesi.nz/my-favorite-podcasts/">&lt;p&gt;The one thing I absolutely love doing when I’m out and about, by myself, either walking, driving or running(not that often) is to listen to podcasts.&lt;br /&gt;
Today I’m going share with you which are my favorite podcasts, but before we get to the “meat” of the article, I want to let you know that I created &lt;a href=&quot;https://github.com/opreaadrian/great-podcasts&quot; title=&quot;Awesome podcasts repository&quot; target=&quot;_blank&quot;&gt;this github repository&lt;/a&gt; where all the podcasts mentioned in this article are listed. If you find it useful, make sure to share it with others and maybe contribute with your own preferences.&lt;/p&gt;

&lt;p&gt;The idea for this article started from a question I saw on one of the Facebook groups I follow, related specifically to the subject of podcasts. After I added my answer, I thought that it would be better if I could create a list that I could refer people to, and why not, have people contribute their own preferences.&lt;/p&gt;

&lt;p&gt;So, without further ado, my list of podcasts.&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpsdevchattvjs-jabber-targetblank-titlejavascript-jabberjavascript-jabbera&quot;&gt;&lt;a href=&quot;https://devchat.tv/js-jabber&quot; target=&quot;_blank&quot; title=&quot;JavaScript Jabber&quot;&gt;JavaScript Jabber&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you want to find out what are the latest and greatest in terms of JS libraries, frameworks, programming techniques, analytics tools, application monitoring, this is your go-to podcast. They have a great panel and they always invite people that are highly relevant in the JavaScript community.
They have an absolutely awesome format, that you will see in both “Adventures In Angular” and “The Freelancers’ Show”, and at the end of the show they do “picks”, so you get the chance to find out what the panelists have been reading about, book titles, articles, various services they use, or don’t(that’s an anti-pick :D).&lt;br /&gt;
Besides the regular panelists, one of them struck me as being a highly ambitious and motivated person — &lt;a href=&quot;https://twitter.com/Aimee_Knight&quot;&gt;Aimee Knight&lt;/a&gt;. The reason for my admiration is that before becoming a developer, she was a figure skater and in my opinion, it takes a lot of courage and effort to make that kind of switch; it’s totally different from becoming a developer after working as an accountant.&lt;br /&gt;
Aimee gave a great talk at &lt;a href=&quot;http://angularconnect.com/&quot;&gt;AngularConnect 2015&lt;/a&gt; titled “Getting Comfortable Being Uncomfortable”, available on Youtube, so check it out:  &lt;a href=&quot;https://youtu.be/B22o_yeDE_s&quot;&gt;https://youtu.be/B22o_yeDE_s&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpsdevchattvadventures-in-angular-targetblank-titleadventures-in-angularadventures-in-angulara&quot;&gt;&lt;a href=&quot;https://devchat.tv/adventures-in-angular&quot; target=&quot;_blank&quot; title=&quot;Adventures In Angular&quot;&gt;Adventures In Angular&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you’re all about Angular, then you have a podcast all about your beloved  framework. You’ll hear about a lot of new directives, services to use in your Angular apps, performance tips, and more.&lt;br /&gt;
Amongst the panelists you’ll hear some of the people that are on &lt;a href=&quot;https://devchat.tv/js-jabber&quot;&gt;JavaScript Jabber&lt;/a&gt; as well, but they also bring in people who are very influential in the Angular community.&lt;br /&gt;
To list some of the panelists, I would mention: &lt;a href=&quot;https://twitter.com/cmaxw&quot;&gt;Charles Max Wood&lt;/a&gt; — initiator of &lt;a href=&quot;https://devchat.tv&quot;&gt;devchat.tv&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/simpulton&quot;&gt;Lukas Ruebbelke&lt;/a&gt; — &lt;a href=&quot;https://egghead.io&quot;&gt;egghead.io&lt;/a&gt; trainer, &lt;a href=&quot;https://twitter.com/John_Papa&quot;&gt;John Papa&lt;/a&gt; — c’mon, it’s John Papa.&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpsdevchattvfreelancers-targetblank-titlethe-freelancers-showthe-freelancers-showa&quot;&gt;&lt;a href=&quot;https://devchat.tv/freelancers&quot; target=&quot;_blank&quot; title=&quot;The Freelancers&#39; Show&quot;&gt;The Freelancers’ Show&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This one is my favorite. I’ve learned so many things from this podcast, that I recently started listening to all the episodes, to make sure I haven’t missed anything critical.&lt;br /&gt;
Same as with “JavaScript Jabber” and “Adventures In Angular”, there are kind of the same people talking, they bring in other people that do freelancing, or offer various services for freelancers.&lt;br /&gt;
I found a lot of useful things from this podcast, and only to name a few: what to bill for, how to pick your clients, keeping up to date, self-promotion,  &lt;a href=&quot;http://www.bookyourselfsolid.com/&quot; title=&quot;Link to Book yourself solid website&quot; target=&quot;_blank&quot;&gt;Michael Port’s “Book yourself solid” program&lt;/a&gt;.
If you’re doing freelancing or planning on going freelance, I wholeheartedly recommend this podcast.&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpentreprogrammerscom-targetblank-titleentreprogrammers-podcastentreprogrammers-podcasta&quot;&gt;&lt;a href=&quot;http://entreprogrammers.com/&quot; target=&quot;_blank&quot; title=&quot;Entreprogrammers Podcast&quot;&gt;Entreprogrammers Podcast&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Again, another one about self-employment, freelancing, and the whole business of being a one-person shop. They discuss about conferences, projects they work on and share tips on how to be a better developreneur :).&lt;br /&gt;
As for the panelists, if you used Backbone in their life, especially &lt;a href=&quot;http://marionettejs.com/&quot;&gt;Marionette.js&lt;/a&gt;, then you should know who &lt;a href=&quot;http://derickbailey.com&quot;&gt;Derick Bailey&lt;/a&gt; is. He used to post on &lt;a href=&quot;https://lostechies.com/&quot;&gt;the LosTechies blog&lt;/a&gt; and do a lot of other cool stuff with podcasting.
You might have gotten used to Charles Max Wood by now. I don’t know where does this guy get his energy from, but, then again, that’s none of my business.&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpsgimletmediacomshowreply-all-targetblank-titlereply-allreply-alla&quot;&gt;&lt;a href=&quot;https://gimletmedia.com/show/reply-all/&quot; target=&quot;_blank&quot; title=&quot;Reply All&quot;&gt;Reply All&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This one is lighter on the brain. No programming involved, just the panelists’ viewpoints on the Internet, and how everything gets shaped by it.&lt;br /&gt;
To quote their own description, “Reply All is a show about the internet, hosted by PJ Vogt and Alex Goldman. It features stories about how people shape the internet, and the internet shapes people.”&lt;br /&gt;
They have other podcasts that might interest you, so feel free to &lt;a href=&quot;https://gimletmedia.com/&quot;&gt;check them all out&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpintegrumtechcomcategoryagile-weekly-podcast-targetblank-titleagile-weekly-podcastagile-weekly-podcasta&quot;&gt;&lt;a href=&quot;http://integrumtech.com/category/agile-weekly-podcast/&quot; target=&quot;_blank&quot; title=&quot;Agile Weekly Podcast&quot;&gt;Agile Weekly Podcast&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This podcast helped me in a time where my knowledge about Agile methodologies was close to -1. It’s not that active lately, and the owners left it unmaintained for quite some time, but they still have very useful info into development teams’ dynamics, and how stuff is supposed to work in Agile environments.&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpsteamtreehousecomlibrarythe-treehouse-show-targetblank-titlethe-treehouse-showthe-treehouse-showa&quot;&gt;&lt;a href=&quot;https://teamtreehouse.com/library/the-treehouse-show&quot; target=&quot;_blank&quot; title=&quot;The Treehouse Show&quot;&gt;The Treehouse Show&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you are a frontend developer, there’s a good chance you probably landed at one point on &lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;www.teamtreehouse.com&lt;/a&gt; while looking for training material. If you’re more into the front-end side of things, this is definitely a podcast worth checking out. It’s hosted by Treehouses’ most prolific authors: &lt;a href=&quot;http://nickpettit.com/&quot;&gt;Nick Petitt&lt;/a&gt; and &lt;a href=&quot;http://jasonseifer.com/&quot;&gt;Jason Seifer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the end of my podcasts list and I’m sure there are many more great podcasts and podcasters out there, so be sure to add your favorite podcast to &lt;a href=&quot;https://github.com/opreaadrian/great-podcasts&quot; title=&quot;Awesome podcasts repository&quot; target=&quot;_blank&quot;&gt;this github repository&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Credits: &lt;br /&gt;
&lt;a href=&quot;https://www.flickr.com/photos/pasukaru76/&quot;&gt;Pascal&lt;/a&gt; — &lt;a href=&quot;https://flic.kr/p/6uzLyN&quot;&gt;Some old Beyer Dynamics headphones.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Adrian Oprea</name></author><summary>The one thing I absolutely love doing when I’m out and about, by myself, either walking, driving or running(not that often) is to listen to podcasts.
Today I’m going share with you which are my favorite podcasts, but before we get to the “meat” of the article, I want to let you know that I created this github repository where all the podcasts mentioned in this article are listed. If you find it useful, make sure to share it with others and maybe contribute with your own preferences.</summary></entry></feed>
