<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    

    <title>WEB RAMBLER</title>
    <generator uri="https://github.com/jekyll/jekyll">Jekyll v2.4.0</generator>
		<icon>http://localhost:4000/apple-touch-icon-precomposed.png</icon>
    <subtitle>Opinionated blog about JavaScript, life, and everything inbetween.</subtitle>
    <link href="http://localhost:4000/atom.xml" rel="self"/>
    <link href="http://localhost:4000/" rel="alternate" type="text/html"/>
    <updated>2014-11-06T01:52:46+02:00</updated>
    <id>http://localhost:4000/</id>
    <author>
			<name>Adrian Oprea</name>
			<uri>http://localhost:4000/</uri>
			
		</author>

    
    <entry>
        <title>Thoughts on Angular 2.0</title>
        <link href="http://localhost:4000/javascript/thoughts-on-angular-2.0/"/>
        <updated>2014-11-05T00:00:00+02:00</updated>
        <id>http://localhost:4000/javascript/thoughts-on-angular-2.0</id>
        <author>
					<name>Adrian Oprea</name>
					<uri>http://localhost:4000/</uri>
					
				</author>
        <content type="html">
        	
        	&lt;p&gt;Today I just started officially blogging, and I feel like a bit of a punk, starting my so-called blogging career with something that resembles a diss, but, Google, you just ruined HTML with your Angular 2.0 plans.&lt;/p&gt;

&lt;p&gt;I am a big fan of Angular, and I really love the way it behaves, and how performant it can be when used right, but when I wanted to find out more about the plans Google has with Angular 2.0, it kind of threw me back… way back. &lt;/p&gt;

&lt;p&gt;I’m currently working on a side project that is a little bit of a mess right now. Built on Django, with JavaScript mixed in Jinja templates(and the other way around), all scripts dumped in the HTML, RequireJS on top of everything, and some libraries that I never heard of, built by weird russian guys(fantastic backend devs) — no pun intended — the project rings the average developer’s “LET’S REWRITE THIS SHIT” bell. &lt;/p&gt;

&lt;p&gt;After countless discussions with my client, he finally agreed to have his backend developer build a RESTful API for me to use with … you guessed it, folks, the new Angular app that I was planning on building for him. 
I actually thought Angular would be the greatest solution and I based my choice on the following facts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Angular is maintained by Google.&lt;/li&gt;
  &lt;li&gt;It is mature enough in the web development landscape.&lt;/li&gt;
  &lt;li&gt;It has a huge comunity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After making this choice, I already created a basic structure for the app, and laid out the bricks that form the base of the app — folder structure, module hierarchy, initial markup, tools setup, tests, etc.&lt;/p&gt;

&lt;p&gt;Besides the fact that now I have to re-evaluate the framework landscape and think of another framework I can use for my client, the biggest reason I’m so upset with this change has more of a historical nuance. 
If you remember the way Microsoft tried to have/push their own JavaScript, in IE — see &lt;a href=&quot;http://en.wikipedia.org/wiki/JScript&quot;&gt;JScript&lt;/a&gt; — then you can probably see the same thing done by Google nowadays. There have been a lot of attempts like this, and to some degree, they feel like a normal thing to me, as the bigger companies would like to have it their way, but none struck me so hard, as I was not that involved in development and nor did I care about standards so much.&lt;/p&gt;

&lt;p&gt;At this point, it just feels like Google wants to have their own WorldWideWeb, with this way of writing Angular apps, and by imposing such a specific way of writing apps, the developped, the so-called “Angular developer” who knows very little about JavaScript, but can talk for days about &lt;code&gt;$scope&lt;/code&gt;, two-way data binding, and how they’re the most awesome things in the Universe after &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, to summarize my complaint, and also to illustrate why I’m feeling Angular 2.0 syntax is wrong, take a look:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- The Angular 1.3 way --&amp;gt;
&amp;lt;button ng-click=&quot;deleteTodo(todo)&quot;&amp;gt;

&amp;lt;!-- The Angular 1.3 way with valid HTML --&amp;gt;
&amp;lt;button data-ng-click=&quot;deleteTodo(todo)&quot;&amp;gt;

&amp;lt;!-- Angular 2.0 way --&amp;gt;
&amp;lt;button (click)=&quot;deleteTodo(todo)&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since when is &lt;code&gt;(click)&lt;/code&gt; an HTML attribute? Google, you’re making HTML &lt;em&gt;too declarative&lt;/em&gt; as far as I’m concerned!&lt;/p&gt;

&lt;p&gt;I’m not going to debate all the modifications that feel wrong to me, so as a closing thought, I’d like to encourage you to talk and share your thoughts in the comments section.&lt;/p&gt;


        </content>
    </entry>
    
</feed>